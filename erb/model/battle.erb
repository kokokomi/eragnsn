; 戦闘開始前の設定を初期化する
@battle_setup
  DT_CREATE "enemies"
  DT_COLUMN_ADD "enemies", "enemy_id", "int16"
  DT_COLUMN_ADD "enemies", "enemy_name"
  DT_COLUMN_ADD "enemies", "enemy_level", "int16"
  DT_COLUMN_ADD "enemies", "enemy_max_hp", "int16"
  DT_COLUMN_ADD "enemies", "enemy_hp", "int16"
  DT_COLUMN_ADD "enemies", "enemy_atk", "int16"
  DT_COLUMN_ADD "enemies", "enemy_exp", "int16"

  ; 戦闘に敵を追加する
@battle_setup_add_enemy(enemyId, enemyLevel)
  #DIM enemyId
  #DIM enemyLevel
  #DIM maxHp
  #DIM enemyAtk
  #DIM namePostfix = 0x41

  maxHp = 敵ステータス:(enemyId):体力 + (敵ステータス:(enemyId):体力加算値 * enemyLevel)
  enemyAtk = 敵ステータス:(enemyId):攻撃力 + (敵ステータス:(enemyId):攻撃力加算値 * enemyLevel)

  {
    DT_ROW_ADD "enemies",
      "enemy_id", enemyId,
      "enemy_name", @"%敵の名前:(enemyId)% %UNICODE(namePostfix + battle_enemy_count())%",
      "enemy_level", enemyLevel,
      "enemy_max_hp", maxHp, 
      "enemy_hp", maxHp, 
      "enemy_atk", enemyAtk
  }

@battle_enemy_name(enemyNum)
  #FUNCTIONS
  #DIM enemyNum
  RETURNF DT_CELL_GETS("enemies", enemyNum, "enemy_name")

@battle_enemy_id(enemyNum)
  #FUNCTION
  #DIM enemyNum
  RETURNF DT_CELL_GET("enemies", enemyNum, "enemy_id")

@battle_enemy_level(enemyNum)
  #FUNCTION
  #DIM enemyNum
  RETURNF DT_CELL_GET("enemies", enemyNum, "enemy_level")

@battle_enemy_max_hp(enemyNum)
  #FUNCTION
  #DIM enemyNum
  RETURNF DT_CELL_GET("enemies", enemyNum, "enemy_max_hp")

@battle_enemy_hp(enemyNum)
  #FUNCTION
  #DIM enemyNum
  RETURNF DT_CELL_GET("enemies", enemyNum, "enemy_hp")

@battle_enemy_atk(enemyNum)
  #FUNCTION
  #DIM enemyNum
  RETURNF DT_CELL_GET("enemies", enemyNum, "enemy_atk")

@battle_enemy_mora(enemyNum)
  #FUNCTION
  #DIM enemyNum
  #DIM enemyId
  enemyId = battle_enemy_id(enemyNum)
  RETURNF 敵ステータス:(enemyId):モラ + 敵ステータス:(enemyId):モラ加算値 * battle_enemy_level(enemyNum)

@battle_enemy_exp(enemyNum)
  #FUNCTION
  #DIM enemyNum
  #DIM enemyId
  enemyId = battle_enemy_id(enemyNum)
  RETURNF 敵ステータス:(enemyId):経験値 + 敵ステータス:(enemyId):経験値加算値 * battle_enemy_level(enemyNum)


  ; 敵の数
@battle_enemy_count
  #FUNCTION
  DT_ROW_LENGTH "enemies"
  RETURNF RESULT

  ; 終了時の後片付け
@battle_cleanup
  DT_RELEASE "enemies"

  ; 戦闘の設定が正しいかのバリデーション
@validate_battle_configuration
  #FUNCTION
  DT_EXIST "enemies"
  IF !RESULT
    RETURNF false
  ENDIF

  DT_ROW_LENGTH "enemies"
  IF RESULT < 1
    RETURNF false
  ENDIF
  RETURNF true

@battle_is_enemy_dead(enemyNum)
  #FUNCTION
  #DIM enemyNum
  RETURNF battle_enemy_hp(enemyNum) <= 0

@battle_is_enemy_dead_all
  #FUNCTION
  RETURNF DT_SELECT("enemies", "enemy_hp > 0", "id ASC") == 0

@battle_attack_to_enemy(enemyNum, charactorNum, damage)
  #DIM enemyNum
  #DIM charactorNum
  #DIM damage
  #DIM newHp
  #DIM lcount
  ; 敵が死んでいる場合は特に処理しない
  IF battle_is_enemy_dead(enemyNum)
    RETURN
  ENDIF

  newHp = MAX(0, battle_enemy_hp(enemyNum) - damage)
  DT_CELL_SET "enemies", enemyNum, "enemy_hp", newHp

  CALL message_enemy_damage(enemyNum, damage)
  ; ダメージを与えて倒したとき
  IF battle_is_enemy_dead(enemyNum)
    CALL battle_on_enemy_dead(enemyNum, charactorNum)
  ENDIF

@battle_on_enemy_dead(enemyNum, charactorNum)
  #DIM enemyNum
  #DIM charactorNum
  #DIM lcount

  FOR lcount, 0, party_get_member_count()
    CALL charactor_charge_energy(lcount, RAND:3 + 5)
    CALL add_charactor_exp(lcount, battle_enemy_exp(enemyNum))

    ;自分自身で拘束している場合開放する
    IF CFLAG:(lcount):拘束 == enemyNum
      CALL charactor_decrease_bad_status(lcount, "拘束")
    ENDIF
    IF CFLAG:(lcount):丸呑み == enemyNum
      CALL charactor_decrease_bad_status(lcount, "丸呑み")
    ENDIF
  NEXT
  MONEY += battle_enemy_mora(enemyNum)